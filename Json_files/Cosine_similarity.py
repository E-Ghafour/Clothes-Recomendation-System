# -*- coding: utf-8 -*-
"""cosine_similarity

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aOJYvFtxB_7SioIzQH_15Des9UA0IOmw
"""

import numpy as np
import pandas as pd
from math import *
from scipy import spatial

def similarity (param1: list, param2: list, param3: list, param4: list, param5: list, dataset: list):
  similarity_list = list()
  for each in dataset:
    similarity.append(calc_distance(param1, param2, param3, param4, param5, each))


def calc_distance(param1: list, param2: list, param3: list, param4: list, param5: list, row: list):
  final_set = list()
  if len(param1) == 1:
    final_set.append(param1[0])
  else:
    param1_sub = param1.copy()
    param1_sub = [abs(x - row[0]) for x in param1_sub]
    final_set.append(param1[param1_sub.index(min(param1_sub))])
  if len(param2) == 1:
    final_set.append(param2[0])
  else:
    param2_sub = param2.copy()
    param2_sub = [abs(x - row[1]) for x in param2_sub]
    final_set.append(param2[param2_sub.index(min(param2_sub))])
  if len(param3) == 1:
    final_set.append(param3[0])
  else:
    param3_sub = param3.copy()
    param3_sub = [abs(x - row[2]) for x in param3_sub]
    final_set.append(param3[param3_sub.index(min(param3_sub))])
  if len(param4) == 1:
    final_set.append(param4[0])
  else:
    param4_sub = param4.copy()
    param4_sub = [abs(x - row[3]) for x in param4_sub]
    final_set.append(param4[param4_sub.index(min(param4_sub))])
  if len(param5) == 1:
    final_set.append(param5[0])
  else:
    param5_sub = param5.copy()
    param5_sub = [abs(x - row[4]) for x in param5_sub]
    final_set.append(param5[param5_sub.index(min(param5_sub))])
  return (1 - spatial.distance.cosine(final_set, row))